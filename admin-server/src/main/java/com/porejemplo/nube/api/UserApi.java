/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.porejemplo.nube.api;

import com.porejemplo.nube.model.AdminBackendGenericError;
import com.porejemplo.nube.model.UserDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-05T18:19:37.224984700+03:00[Europe/Moscow]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /user : Удаляет пользователя
     * Удаление существующего пользователя по его id
     *
     * @param id id пользователя (required)
     * @return ENACTED (status code 204)
     *         or Ошибка (status code 200)
     */
    @ApiOperation(value = "Удаляет пользователя", nickname = "userDelete", notes = "Удаление существующего пользователя по его id", tags={ "Удалить пользователя", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "ENACTED"),
        @ApiResponse(code = 200, message = "Ошибка", response = AdminBackendGenericError.class) })
    @DeleteMapping(
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> userDelete(@NotNull @ApiParam(value = "id пользователя", required = true) @Valid @RequestParam(value = "id", required = true) Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user : Список пользователей
     * Возвращает список всех пользователей.
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Список пользователей", nickname = "userGet", notes = "Возвращает список всех пользователей.", response = UserDto.class, responseContainer = "List", tags={ "Все пользователи", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDto.class, responseContainer = "List") })
    @GetMapping(
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDto>> userGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"nickname\" : \"nickname\", \"id\" : 0, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user : Создаёт нового пользователя
     * Создание нового пользователя на основании переданных параметров
     *
     * @param createOrUpdateUserDto объект UserDto для создания или изменения пользователя (required)
     * @return CREATED (status code 201)
     *         or Ошибка (status code 200)
     */
    @ApiOperation(value = "Создаёт нового пользователя", nickname = "userPost", notes = "Создание нового пользователя на основании переданных параметров", response = String.class, tags={ "Создать пользователя", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "CREATED", response = String.class),
        @ApiResponse(code = 200, message = "Ошибка", response = AdminBackendGenericError.class) })
    @PostMapping(
        value = "/user",
        produces = { "text/plain", "application/json" }
    )
    default ResponseEntity<String> userPost(@NotNull @ApiParam(value = "объект UserDto для создания или изменения пользователя", required = true) @Valid UserDto createOrUpdateUserDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user : Изменяет существующего пользователя
     * Изменение существующего пользователя на основании переданных параметров
     *
     * @param createOrUpdateUserDto объект UserDto для создания или изменения пользователя (required)
     * @return ACCEPTED (status code 202)
     *         or Ошибка (status code 200)
     */
    @ApiOperation(value = "Изменяет существующего пользователя", nickname = "userPut", notes = "Изменение существующего пользователя на основании переданных параметров", response = String.class, tags={ "Изменить пользователя", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "ACCEPTED", response = String.class),
        @ApiResponse(code = 200, message = "Ошибка", response = AdminBackendGenericError.class) })
    @PutMapping(
        value = "/user",
        produces = { "text/plain", "application/json" }
    )
    default ResponseEntity<String> userPut(@NotNull @ApiParam(value = "объект UserDto для создания или изменения пользователя", required = true) @Valid UserDto createOrUpdateUserDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
